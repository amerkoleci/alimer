// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

namespace Alimer.Graphics.VGPU;

internal partial struct VGPUColor
{
	public float r;
	public float g;
	public float b;
	public float a;
}

internal partial struct VGPUExtent2D
{
	public uint width;
	public uint height;
}

internal partial struct VGPUExtent3D
{
	public uint width;
	public uint height;
	public uint depth;
}

internal partial struct VGPURect
{
	public int x;
	public int y;
	public int width;
	public int height;
}

internal partial struct VGPUViewport
{
	public float x;
	public float y;
	public float width;
	public float height;
	public float minDepth;
	public float maxDepth;
}

internal partial struct VGPUDispatchIndirectCommand
{
	public uint x;
	public uint y;
	public uint z;
}

internal partial struct VGPUDrawIndirectCommand
{
	public uint vertexCount;
	public uint instanceCount;
	public uint firstVertex;
	public uint firstInstance;
}

internal partial struct VGPUDrawIndexedIndirectCommand
{
	public uint indexCount;
	public uint instanceCount;
	public uint firstIndex;
	public int baseVertex;
	public uint firstInstance;
}

internal partial struct VGPURenderPassColorAttachment
{
	public VGPUTexture texture;
	public uint level;
	public uint slice;
	public VGPULoadAction loadAction;
	public VGPUStoreAction storeAction;
	public VGPUColor clearColor;
}

internal partial struct VGPURenderPassDepthStencilAttachment
{
	public VGPUTexture texture;
	public uint level;
	public uint slice;
	public VGPULoadAction depthLoadOp;
	public VGPUStoreAction depthStoreOp;
	public float clearDepth;
	public VGPULoadAction stencilLoadOp;
	public VGPUStoreAction stencilStoreOp;
	public byte clearStencil;
}

internal partial struct VGPURenderPassDesc
{
	public uint colorAttachmentCount;
	public unsafe VGPURenderPassColorAttachment* colorAttachments;
	public unsafe VGPURenderPassDepthStencilAttachment* depthStencilAttachment;
}

internal partial struct VGPUBufferDescriptor
{
	public unsafe sbyte* label;
	public ulong size;
	public VGPUBufferUsage usage;
	public VGPUCpuAccessMode cpuAccess;
	public nuint handle;
}

internal partial struct VGPUTextureDesc
{
	public unsafe sbyte* label;
	public VGPUTextureDimension dimension;
	public VGPUTextureFormat format;
	public VGPUTextureUsage usage;
	public uint width;
	public uint height;
	public uint depthOrArrayLayers;
	public uint mipLevelCount;
	public uint sampleCount;
	public VGPUCpuAccessMode cpuAccess;
}

internal partial struct VGPUSamplerDesc
{
	public unsafe sbyte* label;
	public VGPUSamplerFilter minFilter;
	public VGPUSamplerFilter magFilter;
	public VGPUSamplerMipFilter mipFilter;
	public VGPUSamplerAddressMode addressU;
	public VGPUSamplerAddressMode addressV;
	public VGPUSamplerAddressMode addressW;
	public uint maxAnisotropy;
	public float mipLodBias;
	public VGPUCompareFunction compareFunction;
	public float lodMinClamp;
	public float lodMaxClamp;
	public VGPUSamplerBorderColor borderColor;
}

internal partial struct VGPUDescriptorRangeDesc
{
	public uint baseRegisterIndex;
	public uint descriptorNum;
	public VGPUDescriptorType descriptorType;
	public VGPUShaderStage visibility;
}

internal partial struct VGPUDescriptorSetDesc
{
	public uint registerSpace;
	public uint rangeCount;
	public unsafe VGPUDescriptorRangeDesc* ranges;
}

internal partial struct VGPUPushConstantRange
{
	public uint shaderRegister;
	public uint size;
	public VGPUShaderStage visibility;
}

internal partial struct VGPUPipelineLayoutDescriptor
{
	public unsafe sbyte* label;
	public uint descriptorSetCount;
	public unsafe VGPUDescriptorSetDesc* descriptorSets;
	public uint pushConstantRangeCount;
	public unsafe VGPUPushConstantRange* pushConstantRanges;
}

internal partial struct VGPUStencilFaceState
{
	public VGPUCompareFunction compareFunction;
	public VGPUStencilOperation failOperation;
	public VGPUStencilOperation depthFailOperation;
	public VGPUStencilOperation passOperation;
}

internal partial struct VGPUDepthStencilState
{
	public VGPUTextureFormat format;
	public VGPUBool32 depthWriteEnabled;
	public VGPUCompareFunction depthCompareFunction;
	public VGPUStencilFaceState stencilFront;
	public VGPUStencilFaceState stencilBack;
	public uint stencilReadMask;
	public uint stencilWriteMask;
}

internal partial struct VGPURenderPipelineColorAttachmentDesc
{
	public VGPUTextureFormat format;
	public VGPUBool32 blendEnabled;
	public VGPUBlendFactor srcColorBlendFactor;
	public VGPUBlendFactor dstColorBlendFactor;
	public VGPUBlendOperation colorBlendOperation;
	public VGPUBlendFactor srcAlphaBlendFactor;
	public VGPUBlendFactor dstAlphaBlendFactor;
	public VGPUBlendOperation alphaBlendOperation;
	public VGPUColorWriteMask colorWriteMask;
}

internal partial struct VGPUVertexAttribute
{
	public VGPUVertexFormat format;
	public uint offset;
	public uint shaderLocation;
}

internal partial struct VGPUVertexBufferLayout
{
	public uint stride;
	public VGPUVertexStepMode stepMode;
	public uint attributeCount;
	public unsafe VGPUVertexAttribute* attributes;
}

internal partial struct VGPUVertexState
{
	public VGPUShaderModule module;
	public uint layoutCount;
	public unsafe VGPUVertexBufferLayout* layouts;
}

internal partial struct VGPUPrimitiveState
{
	public VGPUPrimitiveTopology topology;
	public uint patchControlPoints;
}

internal partial struct VGPURenderPipelineDescriptor
{
	public unsafe sbyte* label;
	public VGPUPipelineLayout layout;
	public VGPUVertexState vertex;
	public VGPUPrimitiveState primitive;
	public VGPUShaderModule fragment;
	public VGPUDepthStencilState depthStencilState;
	public uint colorAttachmentCount;
	public unsafe VGPURenderPipelineColorAttachmentDesc* colorAttachments;
	public uint sampleCount;
	public VGPUBool32 alphaToCoverageEnabled;
}

internal partial struct VGPUComputePipelineDescriptor
{
	public unsafe sbyte* label;
	public VGPUPipelineLayout layout;
	public VGPUShaderModule shader;
}

internal partial struct VGPURayTracingPipelineDescriptor
{
	public unsafe sbyte* label;
	public VGPUPipelineLayout layout;
}

internal partial struct VGPUQueryHeapDescriptor
{
	public unsafe sbyte* label;
	public VGPUQueryType type;
	public uint count;
	public VGPUQueryPipelineStatistic pipelineStatistics;
}

internal partial struct VGPUSwapChainDescriptor
{
	public unsafe sbyte* label;
	public uint width;
	public uint height;
	public VGPUTextureFormat format;
	public VGPUPresentMode presentMode;
	public VGPUBool32 isFullscreen;
}

internal partial struct VGPUDeviceDescriptor
{
	public unsafe sbyte* label;
	public VGPUBackend preferredBackend;
	public VGPUValidationMode validationMode;
	public VGPUPowerPreference powerPreference;
}

internal partial struct VGPUAdapterProperties
{
	public uint vendorId;
	public uint deviceId;
	public unsafe sbyte* name;
	public unsafe sbyte* driverDescription;
	public VGPUAdapterType adapterType;
}

internal partial struct VGPULimits
{
	public uint maxTextureDimension1D;
	public uint maxTextureDimension2D;
	public uint maxTextureDimension3D;
	public uint maxTextureDimensionCube;
	public uint maxTextureArrayLayers;
	public ulong maxConstantBufferBindingSize;
	public ulong maxStorageBufferBindingSize;
	public uint minUniformBufferOffsetAlignment;
	public uint minStorageBufferOffsetAlignment;
	public uint maxVertexBuffers;
	public uint maxVertexAttributes;
	public uint maxVertexBufferArrayStride;
	public uint maxComputeWorkgroupStorageSize;
	public uint maxComputeInvocationsPerWorkGroup;
	public uint maxComputeWorkGroupSizeX;
	public uint maxComputeWorkGroupSizeY;
	public uint maxComputeWorkGroupSizeZ;
	public uint maxComputeWorkGroupsPerDimension;
	public uint maxViewports;
	public unsafe fixed uint maxViewportDimensions[2];
	public uint maxColorAttachments;
	public ulong rayTracingShaderGroupIdentifierSize;
	public ulong rayTracingShaderTableAligment;
	public ulong rayTracingShaderTableMaxStride;
	public uint rayTracingShaderRecursionMaxDepth;
	public uint rayTracingMaxGeometryCount;
}

internal partial struct VGPUPixelFormatInfo
{
	public VGPUTextureFormat format;
	public unsafe sbyte* name;
	public byte bytesPerBlock;
	public byte blockWidth;
	public byte blockHeight;
	public VGPUFormatKind kind;
}

internal partial struct VGPUVertexFormatInfo
{
	public VGPUVertexFormat format;
	public uint byteSize;
	public uint componentCount;
	public uint componentByteSize;
	public VGPUFormatKind baseType;
}

