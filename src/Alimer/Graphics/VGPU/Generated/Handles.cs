// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System.Diagnostics;

namespace Alimer.Graphics.VGPU;

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUDevice : IEquatable<VGPUDevice>
{
	public VGPUDevice(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUDevice Null => new(0);
	public static implicit operator VGPUDevice(nint handle) => new(handle);
	public static bool operator ==(VGPUDevice left, VGPUDevice right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUDevice left, VGPUDevice right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUDevice left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUDevice left, nint right) => left.Handle != right;
	public bool Equals(VGPUDevice other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUDevice handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUDevice)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUBuffer : IEquatable<VGPUBuffer>
{
	public VGPUBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUBuffer Null => new(0);
	public static implicit operator VGPUBuffer(nint handle) => new(handle);
	public static bool operator ==(VGPUBuffer left, VGPUBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUBuffer left, VGPUBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUBuffer left, nint right) => left.Handle != right;
	public bool Equals(VGPUBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUTexture : IEquatable<VGPUTexture>
{
	public VGPUTexture(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUTexture Null => new(0);
	public static implicit operator VGPUTexture(nint handle) => new(handle);
	public static bool operator ==(VGPUTexture left, VGPUTexture right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUTexture left, VGPUTexture right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUTexture left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUTexture left, nint right) => left.Handle != right;
	public bool Equals(VGPUTexture other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUTexture handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUTexture)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUTextureView : IEquatable<VGPUTextureView>
{
	public VGPUTextureView(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUTextureView Null => new(0);
	public static implicit operator VGPUTextureView(nint handle) => new(handle);
	public static bool operator ==(VGPUTextureView left, VGPUTextureView right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUTextureView left, VGPUTextureView right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUTextureView left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUTextureView left, nint right) => left.Handle != right;
	public bool Equals(VGPUTextureView other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUTextureView handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUTextureView)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUSampler : IEquatable<VGPUSampler>
{
	public VGPUSampler(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUSampler Null => new(0);
	public static implicit operator VGPUSampler(nint handle) => new(handle);
	public static bool operator ==(VGPUSampler left, VGPUSampler right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUSampler left, VGPUSampler right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUSampler left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUSampler left, nint right) => left.Handle != right;
	public bool Equals(VGPUSampler other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUSampler handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUSampler)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUShaderModule : IEquatable<VGPUShaderModule>
{
	public VGPUShaderModule(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUShaderModule Null => new(0);
	public static implicit operator VGPUShaderModule(nint handle) => new(handle);
	public static bool operator ==(VGPUShaderModule left, VGPUShaderModule right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUShaderModule left, VGPUShaderModule right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUShaderModule left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUShaderModule left, nint right) => left.Handle != right;
	public bool Equals(VGPUShaderModule other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUShaderModule handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUShaderModule)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUPipelineLayout : IEquatable<VGPUPipelineLayout>
{
	public VGPUPipelineLayout(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUPipelineLayout Null => new(0);
	public static implicit operator VGPUPipelineLayout(nint handle) => new(handle);
	public static bool operator ==(VGPUPipelineLayout left, VGPUPipelineLayout right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUPipelineLayout left, VGPUPipelineLayout right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUPipelineLayout left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUPipelineLayout left, nint right) => left.Handle != right;
	public bool Equals(VGPUPipelineLayout other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUPipelineLayout handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUPipelineLayout)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUPipeline : IEquatable<VGPUPipeline>
{
	public VGPUPipeline(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUPipeline Null => new(0);
	public static implicit operator VGPUPipeline(nint handle) => new(handle);
	public static bool operator ==(VGPUPipeline left, VGPUPipeline right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUPipeline left, VGPUPipeline right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUPipeline left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUPipeline left, nint right) => left.Handle != right;
	public bool Equals(VGPUPipeline other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUPipeline handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUPipeline)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUQueryHeap : IEquatable<VGPUQueryHeap>
{
	public VGPUQueryHeap(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUQueryHeap Null => new(0);
	public static implicit operator VGPUQueryHeap(nint handle) => new(handle);
	public static bool operator ==(VGPUQueryHeap left, VGPUQueryHeap right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUQueryHeap left, VGPUQueryHeap right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUQueryHeap left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUQueryHeap left, nint right) => left.Handle != right;
	public bool Equals(VGPUQueryHeap other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUQueryHeap handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUQueryHeap)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUSwapChain : IEquatable<VGPUSwapChain>
{
	public VGPUSwapChain(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUSwapChain Null => new(0);
	public static implicit operator VGPUSwapChain(nint handle) => new(handle);
	public static bool operator ==(VGPUSwapChain left, VGPUSwapChain right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUSwapChain left, VGPUSwapChain right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUSwapChain left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUSwapChain left, nint right) => left.Handle != right;
	public bool Equals(VGPUSwapChain other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUSwapChain handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUSwapChain)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
internal readonly partial struct VGPUCommandBuffer : IEquatable<VGPUCommandBuffer>
{
	public VGPUCommandBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VGPUCommandBuffer Null => new(0);
	public static implicit operator VGPUCommandBuffer(nint handle) => new(handle);
	public static bool operator ==(VGPUCommandBuffer left, VGPUCommandBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(VGPUCommandBuffer left, VGPUCommandBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(VGPUCommandBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(VGPUCommandBuffer left, nint right) => left.Handle != right;
	public bool Equals(VGPUCommandBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VGPUCommandBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VGPUCommandBuffer)} [0x{Handle.ToString("X")}]";
}

