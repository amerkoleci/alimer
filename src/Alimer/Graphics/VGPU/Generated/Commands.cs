// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Runtime.InteropServices;
using static Alimer.Utilities.MarshalUtilities;

namespace Alimer.Graphics.VGPU;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal unsafe delegate void VGPULogCallback(VGPULogLevel level, sbyte* message, nint userData);

internal unsafe partial class VGPU
{
	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetLogCallback")]
	public static extern void vgpuSetLogCallback(VGPULogCallback func, nint userData);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuIsBackendSupported")]
	public static extern VGPUBool32 vgpuIsBackendSupported(VGPUBackend backend);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateDevice")]
	public static extern VGPUDevice vgpuCreateDevice(VGPUDeviceDescriptor* descriptor);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuDestroyDevice")]
	public static extern void vgpuDestroyDevice(VGPUDevice device);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuDeviceSetLabel")]
	public static extern void vgpuDeviceSetLabel(VGPUDevice device, sbyte* label);

	public static void vgpuDeviceSetLabel(VGPUDevice device, ReadOnlySpan<sbyte> label)
	{
		fixed (sbyte* pLabel = label)
		{
			vgpuDeviceSetLabel(device, pLabel);
		}
	}

	public static void vgpuDeviceSetLabel(VGPUDevice device, string? label = default)
	{
		vgpuDeviceSetLabel(device, label.GetUtf8Span());
	}

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuWaitIdle")]
	public static extern void vgpuWaitIdle(VGPUDevice device);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuGetBackend")]
	public static extern VGPUBackend vgpuGetBackend(VGPUDevice device);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuQueryFeature")]
	public static extern VGPUBool32 vgpuQueryFeature(VGPUDevice device, VGPUFeature feature);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuGetAdapterProperties")]
	public static extern void vgpuGetAdapterProperties(VGPUDevice device, VGPUAdapterProperties* properties);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuGetLimits")]
	public static extern void vgpuGetLimits(VGPUDevice device, VGPULimits* limits);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSubmit")]
	public static extern ulong vgpuSubmit(VGPUDevice device, VGPUCommandBuffer* commandBuffers, uint count);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuGetFrameCount")]
	public static extern ulong vgpuGetFrameCount(VGPUDevice device);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuGetFrameIndex")]
	public static extern uint vgpuGetFrameIndex(VGPUDevice device);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateBuffer")]
	public static extern VGPUBuffer vgpuCreateBuffer(VGPUDevice device, VGPUBufferDescriptor* descriptor, void* initialData);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuBufferGetSize")]
	public static extern ulong vgpuBufferGetSize(VGPUBuffer buffer);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuBufferGetUsage")]
	public static extern VGPUBufferUsage vgpuBufferGetUsage(VGPUBuffer buffer);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuBufferGetAddress")]
	public static extern ulong vgpuBufferGetAddress(VGPUBuffer buffer);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuBufferSetLabel")]
	public static extern void vgpuBufferSetLabel(VGPUBuffer buffer, sbyte* label);

	public static void vgpuBufferSetLabel(VGPUBuffer buffer, ReadOnlySpan<sbyte> label)
	{
		fixed (sbyte* pLabel = label)
		{
			vgpuBufferSetLabel(buffer, pLabel);
		}
	}

	public static void vgpuBufferSetLabel(VGPUBuffer buffer, string? label = default)
	{
		vgpuBufferSetLabel(buffer, label.GetUtf8Span());
	}

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuBufferAddRef")]
	public static extern uint vgpuBufferAddRef(VGPUBuffer buffer);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuBufferRelease")]
	public static extern uint vgpuBufferRelease(VGPUBuffer buffer);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateTexture")]
	public static extern VGPUTexture vgpuCreateTexture(VGPUDevice device, VGPUTextureDesc* desc, void* initialData);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuTextureGetDimension")]
	public static extern VGPUTextureDimension vgpuTextureGetDimension(VGPUTexture texture);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuTextureSetLabel")]
	public static extern void vgpuTextureSetLabel(VGPUTexture texture, sbyte* label);

	public static void vgpuTextureSetLabel(VGPUTexture texture, ReadOnlySpan<sbyte> label)
	{
		fixed (sbyte* pLabel = label)
		{
			vgpuTextureSetLabel(texture, pLabel);
		}
	}

	public static void vgpuTextureSetLabel(VGPUTexture texture, string? label = default)
	{
		vgpuTextureSetLabel(texture, label.GetUtf8Span());
	}

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuTextureAddRef")]
	public static extern uint vgpuTextureAddRef(VGPUTexture texture);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuTextureRelease")]
	public static extern uint vgpuTextureRelease(VGPUTexture texture);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateSampler")]
	public static extern VGPUSampler vgpuCreateSampler(VGPUDevice device, VGPUSamplerDesc* desc);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSamplerSetLabel")]
	public static extern void vgpuSamplerSetLabel(VGPUSampler sampler, sbyte* label);

	public static void vgpuSamplerSetLabel(VGPUSampler sampler, ReadOnlySpan<sbyte> label)
	{
		fixed (sbyte* pLabel = label)
		{
			vgpuSamplerSetLabel(sampler, pLabel);
		}
	}

	public static void vgpuSamplerSetLabel(VGPUSampler sampler, string? label = default)
	{
		vgpuSamplerSetLabel(sampler, label.GetUtf8Span());
	}

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSamplerAddRef")]
	public static extern uint vgpuSamplerAddRef(VGPUSampler sampler);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSamplerRelease")]
	public static extern uint vgpuSamplerRelease(VGPUSampler sampler);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateShaderModule")]
	public static extern VGPUShaderModule vgpuCreateShaderModule(VGPUDevice device, void* code, nuint codeSize);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuDestroyShaderModule")]
	public static extern void vgpuDestroyShaderModule(VGPUDevice device, VGPUShaderModule module);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreatePipelineLayout")]
	public static extern VGPUPipelineLayout vgpuCreatePipelineLayout(VGPUDevice device, VGPUPipelineLayoutDescriptor* descriptor);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuPipelineLayoutSetLabel")]
	public static extern void vgpuPipelineLayoutSetLabel(VGPUPipelineLayout pipelineLayout, sbyte* label);

	public static void vgpuPipelineLayoutSetLabel(VGPUPipelineLayout pipelineLayout, ReadOnlySpan<sbyte> label)
	{
		fixed (sbyte* pLabel = label)
		{
			vgpuPipelineLayoutSetLabel(pipelineLayout, pLabel);
		}
	}

	public static void vgpuPipelineLayoutSetLabel(VGPUPipelineLayout pipelineLayout, string? label = default)
	{
		vgpuPipelineLayoutSetLabel(pipelineLayout, label.GetUtf8Span());
	}

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuPipelineLayoutAddRef")]
	public static extern uint vgpuPipelineLayoutAddRef(VGPUPipelineLayout pipelineLayout);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuPipelineLayoutRelease")]
	public static extern uint vgpuPipelineLayoutRelease(VGPUPipelineLayout pipelineLayout);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateRenderPipeline")]
	public static extern VGPUPipeline vgpuCreateRenderPipeline(VGPUDevice device, VGPURenderPipelineDescriptor* descriptor);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateComputePipeline")]
	public static extern VGPUPipeline vgpuCreateComputePipeline(VGPUDevice device, VGPUComputePipelineDescriptor* descriptor);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateRayTracingPipeline")]
	public static extern VGPUPipeline vgpuCreateRayTracingPipeline(VGPUDevice device, VGPURayTracingPipelineDescriptor* descriptor);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuPipelineGetType")]
	public static extern VGPUPipelineType vgpuPipelineGetType(VGPUPipeline pipeline);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuPipelineSetLabel")]
	public static extern void vgpuPipelineSetLabel(VGPUPipeline pipeline, sbyte* label);

	public static void vgpuPipelineSetLabel(VGPUPipeline pipeline, ReadOnlySpan<sbyte> label)
	{
		fixed (sbyte* pLabel = label)
		{
			vgpuPipelineSetLabel(pipeline, pLabel);
		}
	}

	public static void vgpuPipelineSetLabel(VGPUPipeline pipeline, string? label = default)
	{
		vgpuPipelineSetLabel(pipeline, label.GetUtf8Span());
	}

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuPipelineAddRef")]
	public static extern uint vgpuPipelineAddRef(VGPUPipeline pipeline);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuPipelineRelease")]
	public static extern uint vgpuPipelineRelease(VGPUPipeline pipeline);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateQueryHeap")]
	public static extern VGPUQueryHeap vgpuCreateQueryHeap(VGPUDevice device, VGPUQueryHeapDescriptor* descriptor);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuQueryHeapSetLabel")]
	public static extern void vgpuQueryHeapSetLabel(VGPUQueryHeap heap, sbyte* label);

	public static void vgpuQueryHeapSetLabel(VGPUQueryHeap heap, ReadOnlySpan<sbyte> label)
	{
		fixed (sbyte* pLabel = label)
		{
			vgpuQueryHeapSetLabel(heap, pLabel);
		}
	}

	public static void vgpuQueryHeapSetLabel(VGPUQueryHeap heap, string? label = default)
	{
		vgpuQueryHeapSetLabel(heap, label.GetUtf8Span());
	}

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuQueryHeapAddRef")]
	public static extern uint vgpuQueryHeapAddRef(VGPUQueryHeap heap);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuQueryHeapRelease")]
	public static extern uint vgpuQueryHeapRelease(VGPUQueryHeap heap);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuCreateSwapChain")]
	public static extern VGPUSwapChain vgpuCreateSwapChain(VGPUDevice device, nint window, VGPUSwapChainDescriptor* descriptor);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSwapChainGetFormat")]
	public static extern VGPUTextureFormat vgpuSwapChainGetFormat(VGPUSwapChain swapChain);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSwapChainAddRef")]
	public static extern uint vgpuSwapChainAddRef(VGPUSwapChain swapChain);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSwapChainRelease")]
	public static extern uint vgpuSwapChainRelease(VGPUSwapChain swapChain);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuBeginCommandBuffer")]
	public static extern VGPUCommandBuffer vgpuBeginCommandBuffer(VGPUDevice device, VGPUCommandQueue queueType, sbyte* label);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuPushDebugGroup")]
	public static extern void vgpuPushDebugGroup(VGPUCommandBuffer commandBuffer, sbyte* groupLabel);

	public static void vgpuPushDebugGroup(VGPUCommandBuffer commandBuffer, ReadOnlySpan<sbyte> groupLabel)
	{
		fixed (sbyte* pGroupLabel = groupLabel)
		{
			vgpuPushDebugGroup(commandBuffer, pGroupLabel);
		}
	}

	public static void vgpuPushDebugGroup(VGPUCommandBuffer commandBuffer, string? groupLabel = default)
	{
		vgpuPushDebugGroup(commandBuffer, groupLabel.GetUtf8Span());
	}

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuPopDebugGroup")]
	public static extern void vgpuPopDebugGroup(VGPUCommandBuffer commandBuffer);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuInsertDebugMarker")]
	public static extern void vgpuInsertDebugMarker(VGPUCommandBuffer commandBuffer, sbyte* markerLabel);

	public static void vgpuInsertDebugMarker(VGPUCommandBuffer commandBuffer, ReadOnlySpan<sbyte> markerLabel)
	{
		fixed (sbyte* pMarkerLabel = markerLabel)
		{
			vgpuInsertDebugMarker(commandBuffer, pMarkerLabel);
		}
	}

	public static void vgpuInsertDebugMarker(VGPUCommandBuffer commandBuffer, string? markerLabel = default)
	{
		vgpuInsertDebugMarker(commandBuffer, markerLabel.GetUtf8Span());
	}

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetPipeline")]
	public static extern void vgpuSetPipeline(VGPUCommandBuffer commandBuffer, VGPUPipeline pipeline);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetPushConstants")]
	public static extern void vgpuSetPushConstants(VGPUCommandBuffer commandBuffer, uint pushConstantIndex, void* data, uint size);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuDispatch")]
	public static extern void vgpuDispatch(VGPUCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuDispatchIndirect")]
	public static extern void vgpuDispatchIndirect(VGPUCommandBuffer commandBuffer, VGPUBuffer buffer, ulong offset);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuAcquireSwapchainTexture")]
	public static extern VGPUTexture vgpuAcquireSwapchainTexture(VGPUCommandBuffer commandBuffer, VGPUSwapChain swapChain, uint* width, uint* height);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuBeginRenderPass")]
	public static extern void vgpuBeginRenderPass(VGPUCommandBuffer commandBuffer, VGPURenderPassDesc* desc);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuEndRenderPass")]
	public static extern void vgpuEndRenderPass(VGPUCommandBuffer commandBuffer);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetViewport")]
	public static extern void vgpuSetViewport(VGPUCommandBuffer commandBuffer, VGPUViewport* viewport);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetViewports")]
	public static extern void vgpuSetViewports(VGPUCommandBuffer commandBuffer, uint count, VGPUViewport* viewports);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetScissorRect")]
	public static extern void vgpuSetScissorRect(VGPUCommandBuffer commandBuffer, VGPURect* scissorRect);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetScissorRects")]
	public static extern void vgpuSetScissorRects(VGPUCommandBuffer commandBuffer, uint count, VGPURect* scissorRects);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetVertexBuffer")]
	public static extern void vgpuSetVertexBuffer(VGPUCommandBuffer commandBuffer, uint index, VGPUBuffer buffer, ulong offset = 0);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetIndexBuffer")]
	public static extern void vgpuSetIndexBuffer(VGPUCommandBuffer commandBuffer, VGPUBuffer buffer, VGPUIndexType type, ulong offset = 0);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuSetStencilReference")]
	public static extern void vgpuSetStencilReference(VGPUCommandBuffer commandBuffer, uint reference);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuDraw")]
	public static extern void vgpuDraw(VGPUCommandBuffer commandBuffer, uint vertexStart, uint vertexCount, uint instanceCount = 1, uint firstInstance = 0);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuDrawIndexed")]
	public static extern void vgpuDrawIndexed(VGPUCommandBuffer commandBuffer, uint indexCount, uint instanceCount = 1, uint firstIndex = 0, int baseVertex = 0, uint firstInstance = 0);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuBeginQuery")]
	public static extern void vgpuBeginQuery(VGPUCommandBuffer commandBuffer, VGPUQueryHeap heap, uint index);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuEndQuery")]
	public static extern void vgpuEndQuery(VGPUCommandBuffer commandBuffer, VGPUQueryHeap heap, uint index);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuResolveQuery")]
	public static extern void vgpuResolveQuery(VGPUCommandBuffer commandBuffer, VGPUQueryHeap heap, uint index, uint count, VGPUBuffer destinationBuffer, ulong destinationOffset);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuResetQuery")]
	public static extern void vgpuResetQuery(VGPUCommandBuffer commandBuffer, VGPUQueryHeap heap, uint index, uint count);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuIsDepthFormat")]
	public static extern VGPUBool32 vgpuIsDepthFormat(VGPUTextureFormat format);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuIsDepthOnlyFormat")]
	public static extern VGPUBool32 vgpuIsDepthOnlyFormat(VGPUTextureFormat format);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuIsStencilOnlyFormat")]
	public static extern VGPUBool32 vgpuIsStencilOnlyFormat(VGPUTextureFormat format);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuIsStencilFormat")]
	public static extern VGPUBool32 vgpuIsStencilFormat(VGPUTextureFormat format);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuIsDepthStencilFormat")]
	public static extern VGPUBool32 vgpuIsDepthStencilFormat(VGPUTextureFormat format);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuIsCompressedFormat")]
	public static extern VGPUBool32 vgpuIsCompressedFormat(VGPUTextureFormat format);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuGetPixelFormatKind")]
	public static extern VGPUFormatKind vgpuGetPixelFormatKind(VGPUTextureFormat format);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuToDxgiFormat")]
	public static extern uint vgpuToDxgiFormat(VGPUTextureFormat format);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuFromDxgiFormat")]
	public static extern VGPUTextureFormat vgpuFromDxgiFormat(uint dxgiFormat);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuToVkFormat")]
	public static extern uint vgpuToVkFormat(VGPUTextureFormat format);

	[DllImport("vgpu", CallingConvention = CallingConvention.Cdecl, EntryPoint = "vgpuStencilTestEnabled")]
	public static extern VGPUBool32 vgpuStencilTestEnabled(VGPUDepthStencilState* depthStencil);

}
