// Copyright (c) Amer Koleci and Contributors.
// Licensed under the MIT License (MIT). See LICENSE in the repository root for more information.

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Alimer.SourceGenerators;

internal static class Extensions
{
    public static string AsString(this Accessibility accessibility)
        => accessibility switch
        {
            Accessibility.Internal => "internal",
            Accessibility.Public => "public",
            Accessibility.Private => "private",
            Accessibility.Protected => "protected",
            _ => "public"
        };

    public static bool IsStruct(this SyntaxNode node)
        => node is StructDeclarationSyntax;

    public static bool IsClass(this SyntaxNode node)
        => node is ClassDeclarationSyntax;

    public static bool IsRecordStruct(this SyntaxNode node)
        => node is RecordDeclarationSyntax recordDecl && recordDecl.ClassOrStructKeyword.IsKind(SyntaxKind.StructKeyword);

    public static bool IsPartial(this SyntaxNode node)
        => node is TypeDeclarationSyntax type && type.Modifiers.Any(static m => m.IsKind(SyntaxKind.PartialKeyword));

    public static FormattedBuilder AppendAutoGenerated(this FormattedBuilder builder)
    {
        return builder
            .AppendLine("// <auto-generated/>")
            ;
    }

    public static FormattedBuilder AppendOpenBracer(this FormattedBuilder builder)
        => builder
            .AppendLine("{")
            .BeginIndentation();

    public static FormattedBuilder AppendCloseBracer(this FormattedBuilder builder, string extra = "")
        => builder
            .EndIndentation()
            .AppendLine("}" + $"{extra}");
}
