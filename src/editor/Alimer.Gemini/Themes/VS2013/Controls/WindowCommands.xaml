<!--
  Originally from the Wide framework:
  https://github.com/chandramouleswaran/Wide
  
  Used in Gemini with kind permission of the author.
 
  Original licence follows:
 
  Copyright (c) 2013 Chandramouleswaran Ravichandran
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    
    <!-- base button style for min, max and close window buttons -->
    <Style x:Key="MetroBaseWindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="grid" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            BorderThickness="1 0 1 1">
                        <ContentPresenter x:Name="contentPresenter" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False" />
                                <Condition Binding="{Binding IsMouseOver, ElementName=grid}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource MainWindowCaptionButtonInactiveGlyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="True" />
                                <Condition Binding="{Binding IsMouseOver, ElementName=grid}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource MainWindowCaptionButtonActiveGlyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False" />
                                <Condition Binding="{Binding IsMouseOver, ElementName=grid}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="grid" Property="Background" Value="{DynamicResource MainWindowCaptionButtonInactiveHoveredBackground}" />
                            <Setter TargetName="grid" Property="BorderBrush" Value="{DynamicResource MainWindowCaptionButtonInactiveHoveredBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource MainWindowCaptionButtonInactiveHoveredGlyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="True" />
                                <Condition Binding="{Binding IsMouseOver, ElementName=grid}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="grid" Property="Background" Value="{DynamicResource MainWindowCaptionButtonActiveHoveredBackground}" />
                            <Setter TargetName="grid" Property="BorderBrush" Value="{DynamicResource MainWindowCaptionButtonActiveHoveredBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource MainWindowCaptionButtonActiveHoveredGlyph}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="grid" Property="Background" Value="{DynamicResource MainWindowCaptionButtonPressedBackground}" />
                            <Setter TargetName="grid" Property="BorderBrush" Value="{DynamicResource MainWindowCaptionButtonPressedBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource MainWindowCaptionButtonPressedGlyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- default button style for min, max and close window buttons -->
    <Style x:Key="MetroWindowButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MetroBaseWindowButtonStyle}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Width" Value="34" />
        <Setter Property="MaxHeight" Value="34" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style TargetType="{x:Type controls:WindowButtonCommands}">
        <Setter Property="DarkCloseButtonStyle" Value="{StaticResource MetroWindowButtonStyle}" />
        <Setter Property="DarkMaxButtonStyle" Value="{StaticResource MetroWindowButtonStyle}" />
        <Setter Property="DarkMinButtonStyle" Value="{StaticResource MetroWindowButtonStyle}" />
        <Setter Property="LightCloseButtonStyle" Value="{StaticResource MetroWindowButtonStyle}" />
        <Setter Property="LightMaxButtonStyle" Value="{StaticResource MetroWindowButtonStyle}" />
        <Setter Property="LightMinButtonStyle" Value="{StaticResource MetroWindowButtonStyle}" />
    </Style>
    
</ResourceDictionary>
